// Generated by ts-to-zod
import { z } from 'zod';
import type { Json } from './supabase.model.d';

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
	z
		.union([
			z.string(),
			z.number(),
			z.boolean(),
			z.record(z.union([jsonSchema, z.undefined()])),
			z.array(jsonSchema)
		])
		.nullable()
);

export const countriesRowSchema = z.object({
	iso_code: z.string(),
	iso_name: z.string().nullable()
});

export const countriesInsertSchema = z.object({
	iso_code: z.string(),
	iso_name: z.string().optional().nullable()
});

export const countriesUpdateSchema = z.object({
	iso_code: z.string().optional(),
	iso_name: z.string().optional().nullable()
});

export const countriesRelationshipsSchema = z.tuple([]);

export const cuisineRestaurantsRowSchema = z.object({
	cuisine_id: z.number(),
	id: z.number(),
	restaurant_id: z.number()
});

export const cuisineRestaurantsInsertSchema = z.object({
	cuisine_id: z.number(),
	id: z.number().optional(),
	restaurant_id: z.number()
});

export const cuisineRestaurantsUpdateSchema = z.object({
	cuisine_id: z.number().optional(),
	id: z.number().optional(),
	restaurant_id: z.number().optional()
});

export const cuisineRestaurantsRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('Rel Cuisine Restaurants_cuisine_id_fkey'),
		columns: z.tuple([z.literal('cuisine_id')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('cuisinerestaurants'),
		referencedColumns: z.tuple([z.literal('cuisine_id')])
	}),
	z.object({
		foreignKeyName: z.literal('Rel Cuisine Restaurants_cuisine_id_fkey'),
		columns: z.tuple([z.literal('cuisine_id')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('cuisines'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('Rel Cuisine Restaurants_restaurant_id_fkey'),
		columns: z.tuple([z.literal('restaurant_id')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('cuisinerestaurants'),
		referencedColumns: z.tuple([z.literal('restaurant_id')])
	}),
	z.object({
		foreignKeyName: z.literal('Rel Cuisine Restaurants_restaurant_id_fkey'),
		columns: z.tuple([z.literal('restaurant_id')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('restaurants'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cuisinesRowSchema = z.object({
	created_at: z.nullable(z.string()),
	id: z.number(),
	name: z.string()
});

export const cuisinesInsertSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	name: z.string()
});

export const cuisinesUpdateSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	name: z.string().optional()
});

export const cuisinesRelationshipsSchema = z.tuple([]);

export const restaurantsRowSchema = z.object({
	address_lines: z.array(z.string()).nullable(),
	city: z.string().nullable(),
	country_code: z.string(),
	created_at: z.string(),
	id: z.number(),
	location: z.unknown(),
	maps_id: z.string().nullable(),
	name: z.string(),
	osm_id: z.number().nullable(),
	website: z.string().nullable()
});

export const restaurantsInsertSchema = z.object({
	address_lines: z.array(z.string()).optional().nullable(),
	city: z.string().optional().nullable(),
	country_code: z.string(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	location: z.unknown(),
	maps_id: z.string().optional().nullable(),
	name: z.string(),
	osm_id: z.number().optional().nullable(),
	website: z.string().optional().nullable()
});

export const restaurantsUpdateSchema = z.object({
	address_lines: z.array(z.string()).optional().nullable(),
	city: z.string().optional().nullable(),
	country_code: z.string().optional(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	location: z.unknown().optional(),
	maps_id: z.string().optional().nullable(),
	name: z.string().optional(),
	osm_id: z.number().optional().nullable(),
	website: z.string().optional().nullable()
});

export const restaurantsRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('restaurants_country_code_fkey'),
		columns: z.tuple([z.literal('country_code')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('countries'),
		referencedColumns: z.tuple([z.literal('iso_code')])
	})
]);

export const cuisinerestaurantsRowSchema = z.object({
	cuisine_id: z.number().nullable(),
	cuisine_name: z.string().nullable(),
	restaurant_id: z.number().nullable(),
	restaurant_name: z.string().nullable()
});

export const cuisinerestaurantsRelationshipsSchema = z.tuple([]);
